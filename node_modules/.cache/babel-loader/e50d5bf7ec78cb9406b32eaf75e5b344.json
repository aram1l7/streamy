{"ast":null,"code":"import { createStreamSuccess, deleteStreamSuccess, editStreamSuccess, getStreamListSuccess, getStreamSuccess } from \"../actions\";\nimport client from \"../../api/streams\";\nimport { toast } from \"react-toastify\";\nimport history from \"../../history\";\nexport const getStreamList = () => async dispatch => {\n  await client.get(\"/streams\").then(response => dispatch(getStreamListSuccess(response.data))).catch(() => toast.error(\"Sorry, something went wrong\"));\n};\nexport const createStream = data => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  await client.post(\"/streams\", { ...data,\n    userId\n  }).then(response => {\n    dispatch(createStreamSuccess(response.data));\n    history.back();\n    toast.success(\"Stream created successfully\");\n  }).catch(() => toast.error(\"Sorry, something went wrong\"));\n};\nexport const getStream = id => async dispatch => {\n  await client.get(`/streams/${id}`).then(response => dispatch(getStreamSuccess(response.data))).catch(() => toast.error(\"Sorry, something went wrong\"));\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  await client.patch(`/streams/${id}`, formValues).then(response => {\n    dispatch(editStreamSuccess(response.data));\n    history.back();\n    toast.success(\"Stream edited successfully\");\n  }).catch(() => toast.error(\"Sorry, something went wrong\"));\n};\nexport const deleteStream = id => async dispatch => {\n  await client.delete(`/streams/${id}`).then(() => {\n    dispatch(deleteStreamSuccess(id));\n    history.back();\n    toast.success(\"Stream deleted successfully\");\n  }).catch(() => toast.error(\"Sorry, something went wrong\"));\n};","map":{"version":3,"sources":["/home/aram/Programming/streams/client/src/store/operations/index.js"],"names":["createStreamSuccess","deleteStreamSuccess","editStreamSuccess","getStreamListSuccess","getStreamSuccess","client","toast","history","getStreamList","dispatch","get","then","response","data","catch","error","createStream","getState","userId","auth","post","back","success","getStream","id","editStream","formValues","patch","deleteStream","delete"],"mappings":"AAAA,SACEA,mBADF,EAEEC,mBAFF,EAGEC,iBAHF,EAIEC,oBAJF,EAKEC,gBALF,QAMO,YANP;AAOA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,QAAMJ,MAAM,CACTK,GADG,CACC,UADD,EAEHC,IAFG,CAEGC,QAAD,IAAcH,QAAQ,CAACN,oBAAoB,CAACS,QAAQ,CAACC,IAAV,CAArB,CAFxB,EAGHC,KAHG,CAGG,MAAMR,KAAK,CAACS,KAAN,CAAY,6BAAZ,CAHT,CAAN;AAID,CALM;AAOP,OAAO,MAAMC,YAAY,GAAIH,IAAD,IAAU,OAAOJ,QAAP,EAAiBQ,QAAjB,KAA8B;AAClE,QAAM;AAAEC,IAAAA;AAAF,MAAaD,QAAQ,GAAGE,IAA9B;AACA,QAAMd,MAAM,CACTe,IADG,CACE,UADF,EACc,EAAE,GAAGP,IAAL;AAAWK,IAAAA;AAAX,GADd,EAEHP,IAFG,CAEGC,QAAD,IAAc;AAClBH,IAAAA,QAAQ,CAACT,mBAAmB,CAACY,QAAQ,CAACC,IAAV,CAApB,CAAR;AACAN,IAAAA,OAAO,CAACc,IAAR;AACAf,IAAAA,KAAK,CAACgB,OAAN,CAAc,6BAAd;AACD,GANG,EAOHR,KAPG,CAOG,MAAMR,KAAK,CAACS,KAAN,CAAY,6BAAZ,CAPT,CAAN;AAQD,CAVM;AAYP,OAAO,MAAMQ,SAAS,GAAIC,EAAD,IAAQ,MAAOf,QAAP,IAAoB;AACnD,QAAMJ,MAAM,CACTK,GADG,CACE,YAAWc,EAAG,EADhB,EAEHb,IAFG,CAEGC,QAAD,IAAcH,QAAQ,CAACL,gBAAgB,CAACQ,QAAQ,CAACC,IAAV,CAAjB,CAFxB,EAGHC,KAHG,CAGG,MAAMR,KAAK,CAACS,KAAN,CAAY,6BAAZ,CAHT,CAAN;AAID,CALM;AAOP,OAAO,MAAMU,UAAU,GAAG,CAACD,EAAD,EAAKE,UAAL,KAAoB,MAAOjB,QAAP,IAAoB;AAChE,QAAMJ,MAAM,CACTsB,KADG,CACI,YAAWH,EAAG,EADlB,EACqBE,UADrB,EAEHf,IAFG,CAEGC,QAAD,IAAc;AAClBH,IAAAA,QAAQ,CAACP,iBAAiB,CAACU,QAAQ,CAACC,IAAV,CAAlB,CAAR;AACAN,IAAAA,OAAO,CAACc,IAAR;AACAf,IAAAA,KAAK,CAACgB,OAAN,CAAc,4BAAd;AACD,GANG,EAOHR,KAPG,CAOG,MAAMR,KAAK,CAACS,KAAN,CAAY,6BAAZ,CAPT,CAAN;AAQD,CATM;AAWP,OAAO,MAAMa,YAAY,GAAIJ,EAAD,IAAQ,MAAOf,QAAP,IAAoB;AACtD,QAAMJ,MAAM,CACTwB,MADG,CACK,YAAWL,EAAG,EADnB,EAEHb,IAFG,CAEE,MAAM;AACVF,IAAAA,QAAQ,CAACR,mBAAmB,CAACuB,EAAD,CAApB,CAAR;AACAjB,IAAAA,OAAO,CAACc,IAAR;AACAf,IAAAA,KAAK,CAACgB,OAAN,CAAc,6BAAd;AACD,GANG,EAOHR,KAPG,CAOG,MAAMR,KAAK,CAACS,KAAN,CAAY,6BAAZ,CAPT,CAAN;AAQD,CATM","sourcesContent":["import {\n  createStreamSuccess,\n  deleteStreamSuccess,\n  editStreamSuccess,\n  getStreamListSuccess,\n  getStreamSuccess,\n} from \"../actions\";\nimport client from \"../../api/streams\";\nimport { toast } from \"react-toastify\";\nimport history from \"../../history\";\n\nexport const getStreamList = () => async (dispatch) => {\n  await client\n    .get(\"/streams\")\n    .then((response) => dispatch(getStreamListSuccess(response.data)))\n    .catch(() => toast.error(\"Sorry, something went wrong\"));\n};\n\nexport const createStream = (data) => async (dispatch, getState) => {\n  const { userId } = getState().auth;\n  await client\n    .post(\"/streams\", { ...data, userId })\n    .then((response) => {\n      dispatch(createStreamSuccess(response.data));\n      history.back();\n      toast.success(\"Stream created successfully\");\n    })\n    .catch(() => toast.error(\"Sorry, something went wrong\"));\n};\n\nexport const getStream = (id) => async (dispatch) => {\n  await client\n    .get(`/streams/${id}`)\n    .then((response) => dispatch(getStreamSuccess(response.data)))\n    .catch(() => toast.error(\"Sorry, something went wrong\"));\n};\n\nexport const editStream = (id, formValues) => async (dispatch) => {\n  await client\n    .patch(`/streams/${id}`, formValues)\n    .then((response) => {\n      dispatch(editStreamSuccess(response.data));\n      history.back();\n      toast.success(\"Stream edited successfully\");\n    })\n    .catch(() => toast.error(\"Sorry, something went wrong\"));\n};\n\nexport const deleteStream = (id) => async (dispatch) => {\n  await client\n    .delete(`/streams/${id}`)\n    .then(() => {\n      dispatch(deleteStreamSuccess(id))\n      history.back();\n      toast.success(\"Stream deleted successfully\");\n    })\n    .catch(() => toast.error(\"Sorry, something went wrong\"));\n};\n"]},"metadata":{},"sourceType":"module"}